#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <queue>
const int  INF =  0x3fffffff;
const int MAX_SIZE = 501;
using namespace std;
struct Node{
	int v,len;
	Node(int _v,int _len):v(_v),len(_len){};
};

int rescure[MAX_SIZE],d[MAX_SIZE],inq[MAX_SIZE]={0},max_re = 0,now_re,result=0;
bool vis[MAX_SIZE] = {false};
vector<Node> graph[MAX_SIZE];
set<int> pre[MAX_SIZE];

bool bf(int s,int n){
	fill(d,d+MAX_SIZE,INF);
	fill(vis,vis+MAX_SIZE,false);
	fill(inq,inq+MAX_SIZE,0);
	vis[s] = true;
	d[s] = 0;
	inq[s]++;
	queue<int> q;
	q.push(s);
	while(!q.empty()){
		int u = q.front();
		q.pop();
		vis[u] = false;
		for(int j=0;j<graph[u].size();j++){
			int v = graph[u][j].v;
			int dis= graph[u][j].len;
			if(dis+d[u] <d[v]){
				d[v] = dis+d[u];
				pre[v].clear();
				pre[v].insert(u);
				if(vis[v] == false){
					q.push(v);
					vis[v] = true;
					inq[v]++;
					//if(inq[v] >=n)
						//return false;
				}
			}else if(dis+d[u] == d[v]){
				pre[v].insert(u);
			}
		}
	}
	return true;
}
void dfs(int now,int start){
	now_re += rescure[now];
	if(now == start ){
		result ++;
		if(now_re > max_re)
			max_re = now_re;
		now_re -= rescure[now];
		return ;
	}
	for(set<int>::iterator it = pre[now].begin();it!=pre[now].end();it++){
		dfs(*it,start);
	}

	now_re -= rescure[now];
}
int main()
{
	std::ios::sync_with_stdio(false);
	std::cin.tie(0);
	int n,m,c1,c2,ta,tb,tl;
	cin>>n>>m>>c1>>c2;
	for(int i = 0;i<n;i++){
		cin>>rescure[i];
	}
	for(int i = 0;i<m;i++){
		cin>>ta>>tb>>tl;
		graph[ta].push_back(Node(tb,tl));
		graph[tb].push_back(Node(ta,tl));
	}

	bf(c1,n);
	dfs(c2,c1);
	cout<<result<<" "<<max_re<<endl;
	return 0;
}